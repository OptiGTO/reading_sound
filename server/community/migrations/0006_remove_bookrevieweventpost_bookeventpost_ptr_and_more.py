# Generated by Django 5.1.4 on 2025-02-01 15:06

import django.contrib.postgres.search
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('community', '0005_alter_bookeventpost_book_alter_generalpost_book_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='bookrevieweventpost',
            name='bookeventpost_ptr',
        ),
        migrations.RemoveField(
            model_name='booktalkeventpost',
            name='bookeventpost_ptr',
        ),
        migrations.RemoveField(
            model_name='personalbookeventpost',
            name='bookeventpost_ptr',
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='book',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_posts', to='community.book', verbose_name='책'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='category',
            field=models.CharField(choices=[('book_post', '책 게시글'), ('reading_group_post', '독서 모임'), ('book_review_event', '서평 이벤트'), ('book_talk_post', '북토크'), ('personal_event_post', '개인 이벤트')], default='book_post', help_text='게시글 유형 선택', max_length=50, verbose_name='카테고리'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='content',
            field=models.TextField(default='내용을 입력하세요', verbose_name='내용'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='등록일'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='event_end_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='이벤트 종료일시'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='event_start_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='이벤트 시작일시'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='id',
            field=models.BigAutoField(auto_created=True, default=1, primary_key=True, serialize=False, verbose_name='ID'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='활성화 여부'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='is_deleted',
            field=models.BooleanField(default=False, verbose_name='삭제 여부'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='is_pinned',
            field=models.BooleanField(default=False, verbose_name='고정 여부'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='is_side_bar',
            field=models.BooleanField(default=False, help_text='게시글을 사이드바에 표시할지 여부를 설정합니다.', verbose_name='사이드바 노출 여부'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='likes',
            field=models.PositiveIntegerField(default=0, verbose_name='좋아요 수'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='tags',
            field=models.ManyToManyField(blank=True, to='community.posttag', verbose_name='태그'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='title',
            field=models.CharField(default='제목을 입력하세요', max_length=200, verbose_name='제목'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='수정일'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='views',
            field=models.PositiveIntegerField(default=0, verbose_name='조회수'),
        ),
        migrations.AddField(
            model_name='bookrevieweventpost',
            name='writer',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='book',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_posts', to='community.book', verbose_name='책'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='category',
            field=models.CharField(choices=[('book_post', '책 게시글'), ('reading_group_post', '독서 모임'), ('book_review_event', '서평 이벤트'), ('book_talk_post', '북토크'), ('personal_event_post', '개인 이벤트')], default='book_post', help_text='게시글 유형 선택', max_length=50, verbose_name='카테고리'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='content',
            field=models.TextField(default='내용을 입력하세요', verbose_name='내용'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='등록일'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='event_end_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='이벤트 종료일시'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='event_start_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='이벤트 시작일시'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='id',
            field=models.BigAutoField(auto_created=True, default=1, primary_key=True, serialize=False, verbose_name='ID'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='활성화 여부'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='is_deleted',
            field=models.BooleanField(default=False, verbose_name='삭제 여부'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='is_pinned',
            field=models.BooleanField(default=False, verbose_name='고정 여부'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='is_side_bar',
            field=models.BooleanField(default=False, help_text='게시글을 사이드바에 표시할지 여부를 설정합니다.', verbose_name='사이드바 노출 여부'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='likes',
            field=models.PositiveIntegerField(default=0, verbose_name='좋아요 수'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='tags',
            field=models.ManyToManyField(blank=True, to='community.posttag', verbose_name='태그'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='title',
            field=models.CharField(default='제목을 입력하세요', max_length=200, verbose_name='제목'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='수정일'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='views',
            field=models.PositiveIntegerField(default=0, verbose_name='조회수'),
        ),
        migrations.AddField(
            model_name='booktalkeventpost',
            name='writer',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='book',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_posts', to='community.book', verbose_name='책'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='category',
            field=models.CharField(choices=[('book_post', '책 게시글'), ('reading_group_post', '독서 모임'), ('book_review_event', '서평 이벤트'), ('book_talk_post', '북토크'), ('personal_event_post', '개인 이벤트')], default='book_post', help_text='게시글 유형 선택', max_length=50, verbose_name='카테고리'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='content',
            field=models.TextField(default='내용을 입력하세요', verbose_name='내용'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='등록일'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='event_end_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='이벤트 종료일시'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='event_start_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='이벤트 시작일시'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='id',
            field=models.BigAutoField(auto_created=True, default=1, primary_key=True, serialize=False, verbose_name='ID'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='활성화 여부'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='is_deleted',
            field=models.BooleanField(default=False, verbose_name='삭제 여부'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='is_pinned',
            field=models.BooleanField(default=False, verbose_name='고정 여부'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='is_side_bar',
            field=models.BooleanField(default=False, help_text='게시글을 사이드바에 표시할지 여부를 설정합니다.', verbose_name='사이드바 노출 여부'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='likes',
            field=models.PositiveIntegerField(default=0, verbose_name='좋아요 수'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='tags',
            field=models.ManyToManyField(blank=True, to='community.posttag', verbose_name='태그'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='title',
            field=models.CharField(default='제목을 입력하세요', max_length=200, verbose_name='제목'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='수정일'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='views',
            field=models.PositiveIntegerField(default=0, verbose_name='조회수'),
        ),
        migrations.AddField(
            model_name='personalbookeventpost',
            name='writer',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='generalpost',
            name='content',
            field=models.TextField(default='내용을 입력하세요', verbose_name='내용'),
        ),
        migrations.AlterField(
            model_name='generalpost',
            name='title',
            field=models.CharField(default='제목을 입력하세요', max_length=200, verbose_name='제목'),
        ),
        migrations.AlterField(
            model_name='readinggrouppost',
            name='content',
            field=models.TextField(default='내용을 입력하세요', verbose_name='내용'),
        ),
        migrations.AlterField(
            model_name='readinggrouppost',
            name='title',
            field=models.CharField(default='제목을 입력하세요', max_length=200, verbose_name='제목'),
        ),
        migrations.AlterField(
            model_name='readingtippost',
            name='content',
            field=models.TextField(default='내용을 입력하세요', verbose_name='내용'),
        ),
        migrations.AlterField(
            model_name='readingtippost',
            name='title',
            field=models.CharField(default='제목을 입력하세요', max_length=200, verbose_name='제목'),
        ),
        migrations.DeleteModel(
            name='BookEventPost',
        ),
    ]
