# Generated by Django 5.1.4 on 2025-01-30 13:05

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isbn', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='ISBN')),
                ('title', models.CharField(max_length=200, verbose_name='책 제목')),
                ('author', models.CharField(blank=True, max_length=100, null=True, verbose_name='저자')),
                ('publisher', models.CharField(blank=True, max_length=100, null=True, verbose_name='출판사')),
                ('pubdate', models.CharField(blank=True, max_length=20, null=True, verbose_name='출판일(문자열)')),
                ('thumbnail_url', models.URLField(blank=True, null=True, verbose_name='썸네일 이미지 URL')),
                ('link', models.URLField(blank=True, null=True, verbose_name='도서 링크')),
                ('description', models.TextField(blank=True, null=True, verbose_name='책 설명')),
                ('priority', models.PositiveIntegerField(blank=True, default=0, help_text='낮은 숫자가 더 높은 우선순위를 가집니다 (예: 1이 2보다 높음).', null=True, verbose_name='우선순위')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='등록일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
            ],
            options={
                'verbose_name': '책',
                'verbose_name_plural': '책 목록',
                'ordering': ['priority', 'title'],
            },
        ),
        migrations.CreateModel(
            name='BookEventPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_side_bar', models.BooleanField(default=False, help_text='게시글을 사이드바에 표시할지 여부를 설정합니다.', verbose_name='사이드바 노출 여부')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('category', models.CharField(blank=True, choices=[('book_post', '책 게시글'), ('personal_event_post', '개인 이벤트'), ('reading_group_post', '독서 모임'), ('book_talk_post', '북토크'), ('book_review_event', '책 리뷰 이벤트')], default='book_post', help_text='게시글 유형 선택', max_length=50, null=True)),
                ('event_start_date', models.DateTimeField(blank=True, null=True, verbose_name='이벤트 시작일시')),
                ('event_end_date', models.DateTimeField(blank=True, null=True, verbose_name='이벤트 종료일시')),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.book')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
            ],
            options={
                'verbose_name': '책 이벤트 게시글',
                'verbose_name_plural': '책 이벤트 게시글 목록',
            },
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
            ],
            options={
                'verbose_name': '장르',
                'verbose_name_plural': '장르',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
            ],
            options={
                'verbose_name': '태그',
                'verbose_name_plural': '태그',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BookReviewEventPost',
            fields=[
                ('bookeventpost_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='community.bookeventpost')),
            ],
            options={
                'verbose_name': '책 리뷰 이벤트',
                'verbose_name_plural': '책 리뷰 이벤트 목록',
            },
            bases=('community.bookeventpost',),
        ),
        migrations.CreateModel(
            name='BookTalkEventPost',
            fields=[
                ('bookeventpost_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='community.bookeventpost')),
            ],
            options={
                'verbose_name': '북토크',
                'verbose_name_plural': '북토크 목록',
            },
            bases=('community.bookeventpost',),
        ),
        migrations.CreateModel(
            name='PersonalBookEventPost',
            fields=[
                ('bookeventpost_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='community.bookeventpost')),
            ],
            options={
                'verbose_name': '개인 책 이벤트',
                'verbose_name_plural': '개인 책 이벤트 목록',
            },
            bases=('community.bookeventpost',),
        ),
        migrations.AddField(
            model_name='book',
            name='genre',
            field=models.ManyToManyField(blank=True, to='community.bookgenre', verbose_name='장르'),
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='post_images/%Y/%m/%d/', verbose_name='이미지')),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': '게시글 이미지',
                'verbose_name_plural': '게시글 이미지 목록',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='bookeventpost',
            name='tags',
            field=models.ManyToManyField(blank=True, to='community.posttag'),
        ),
        migrations.CreateModel(
            name='GeneralPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_side_bar', models.BooleanField(default=False, help_text='게시글을 사이드바에 표시할지 여부를 설정합니다.', verbose_name='사이드바 노출 여부')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('category', models.CharField(blank=True, choices=[('book_post', '책 게시글'), ('personal_event_post', '개인 이벤트'), ('reading_group_post', '독서 모임'), ('book_talk_post', '북토크'), ('book_review_event', '책 리뷰 이벤트')], default='book_post', help_text='게시글 유형 선택', max_length=50, null=True)),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.book')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
                ('tags', models.ManyToManyField(blank=True, to='community.posttag')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
                'abstract': False,
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='community_g_search__9453b2_gin')],
            },
        ),
        migrations.CreateModel(
            name='ReadingGroupPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_side_bar', models.BooleanField(default=False, help_text='게시글을 사이드바에 표시할지 여부를 설정합니다.', verbose_name='사이드바 노출 여부')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('category', models.CharField(blank=True, choices=[('book_post', '책 게시글'), ('personal_event_post', '개인 이벤트'), ('reading_group_post', '독서 모임'), ('book_talk_post', '북토크'), ('book_review_event', '책 리뷰 이벤트')], default='book_post', help_text='게시글 유형 선택', max_length=50, null=True)),
                ('event_date', models.DateField(blank=True, null=True)),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.book')),
                ('tags', models.ManyToManyField(blank=True, to='community.posttag')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
            ],
            options={
                'verbose_name': '독서 모임 게시글',
                'verbose_name_plural': '독서 모임 게시글 목록',
                'ordering': ['-is_pinned', '-created_at'],
                'abstract': False,
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='community_r_search__fb8c49_gin')],
            },
        ),
        migrations.CreateModel(
            name='ReadingTipPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_side_bar', models.BooleanField(default=False, help_text='게시글을 사이드바에 표시할지 여부를 설정합니다.', verbose_name='사이드바 노출 여부')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('category', models.CharField(blank=True, choices=[('book_post', '책 게시글'), ('personal_event_post', '개인 이벤트'), ('reading_group_post', '독서 모임'), ('book_talk_post', '북토크'), ('book_review_event', '책 리뷰 이벤트')], default='book_post', help_text='게시글 유형 선택', max_length=50, null=True)),
                ('tip_category', models.CharField(choices=[('reading', '독서 팁'), ('writing', '글쓰기 팁'), ('other', '기타')], default='reading', max_length=50)),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.book')),
                ('tags', models.ManyToManyField(blank=True, to='community.posttag')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
                'abstract': False,
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='community_r_search__32a59b_gin')],
            },
        ),
    ]
